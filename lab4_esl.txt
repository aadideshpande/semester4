;HEX to bcd conversion
	area reset, data, readonly
	export __Vectors
__Vectors
	dcd 0x10001000
	dcd Reset_Handler
	
	area mydata, data, readwrite
dst dcd 0	
	area mycode, code, readonly
	export Reset_Handler
num1 dcd 0xf
	entry
Reset_Handler
	ldr r0,=num1
	ldr r1,[r0]
	ldr r3,=dst
ZERO
	mov r2,#0
	cmp r1,#0XA
	bcc	THREE
ONE	
	cmp r1,#0XA
	bcc TWO
	sub r1,r1,#0XA
	add r2,r2,#1
	b ONE
TWO
	str r1,[r3],#1
	mov r1,r2
	b ZERO
THREE
	STR R1,[R3]
	LDR R0,=DST
	MOV R1,#4
	LDR R2,[R0]
	MOV R4,#0XF
	MOV R5,#0
FOUR
	CMP R1,#0
	BEQ FIVE
	AND R6,R2,R4
	LSR R2,R2,#4
	LSL R4,R4,#4
	ORR R5,R5,R6
	SUB R1,R1,#1
	B FOUR
FIVE
	STR R5,[R0]
STOP
	B STOP
	END
----------------------------------------
	;bcd addition
	area reset, data, readonly
	export __Vectors
__Vectors
	dcd 0x10001000
	dcd Reset_Handler
	
	area mydata, data, readwrite
dst dcd 0
	area mycode, code,readonly
	export Reset_Handler
	ENTRY
n1 dcd 0x00001234
n2 dcd 0x00001111
	
Reset_Handler
	
	ldr r0, =n1
	ldr r1, =n2
	ldr r2, [r0]
	ldr r3, [r1]
	ldr r0, =dst	; r0 points to destination 
	mov r5, #8
	mov r6, #0 		; to store the carry 
	mov r9, #0xf	
	mov r4, #0
	
up
	; create copies 
	mov r7, r2
	mov r8, r3
	
	and r7, r9		; get the lower nibble
	mov r8, r3
	lsr r7, r4
	add r7, r6		; add previous carry to it 
	mov r6, #0		; reinitialize carry
	and r8, r9
	lsr r8, r4
	bl myadd
	
	add r4,	#4
	lsl r9, #4		; shift 0x0000000f to 0x000000f0 etc
	subs r5, #1
	bne up
	strb r6, [r0]

stop 
	b stop

myadd
	adds r7, r8 	; r7 and r8 contain the nibbles
	cmp r7, #0xA
	bcc store		; if r7 < oxA, go to store
	sub r7, #0xA
	add r6, #01
store
	strb r7, [r0], #1
	bx lr 
	
	END
	
	---------------------------------------
;bcd multiplication
	area reset, data, readonly
	export __Vectors
__Vectors
	dcd 0x10001000
	dcd Reset_Handler
	
	area mydata, data, readwrite
temp dcd 0
product dcd 0
	area mycode, code, readonly
	export Reset_Handler
n1 dcd 0x12
n2 dcd 0x8
	entry
Reset_Handler
	; for n1
	ldr r0, =n1		
	ldr r2, [r0]
	bl bcd_hex 		;goes to subroutine, convert bcd to hex
	mov r9, r5
	
	; for n2
	ldr r0, =n2
	ldr r2, [r0]
	bl bcd_hex
	mov r10, r5
	
	ldr r0, =product
	mul r9, r10			;decimal numbers are multiplied
	bl hex_bcd			; convert the hex back to bcd
	ldr r9, =temp
up2
	ldr r12, [r9], #1
	ldr r11, [r9], #1
	lsl r11, #4
	orr r12, r11
	strb r12, [r0], #1
	subs r1, #1
	bne up2
	
	bl hex_bcd
stop 
	b stop
	
; subroutine
bcd_hex				; 00001234 = 4*(10^0) + 3*(10^1) + 2*(10^2) + 1*(10^3)	
	mov r3, #1		; we convert bcd to decimal
	mov r4, #0xA
	mov r5, #0
	mov r7, #0xf
up
	and r6,r2,r7
	mla r5, r6, r3, r5	
	mul r3, r4
	lsr r2, #4
	cmp r2, #0
	bne up
	bx lr	; r5 stores the hex number

;subroutine
hex_bcd
	mov r8, #0
	ldr r1, =temp
up1 
	cmp r9, #0xA
	bcc store		; if r9 < 0xA
	sub r9, #0xA
	add r8, #01
	b up1

store
	strb r9, [r1], #1
	mov r9, r8
	mov r0, #0
	cmp r9, #0xA
	bcs up1
	strb r9, [r1]
	ldr r8, =temp
	sub r1, r8
	bx lr
	
	end 
	-------------------------------------------
;packed bcd to ascii
	area reset, data, readonly
	export __Vectors
__Vectors
	dcd 0x10001000
	dcd Reset_Handler

	area mydata, data, readwrite
dst dcd 0
	area mycode, code, readonly
	export Reset_Handler
	entry
src dcd 0x12345678
Reset_Handler
	ldr r5,=dst
	ldr r6,=src
	ldr r0, [r6]
	mov r9, #8		;counter
loop
	and r1,r0,#0x0f		;nibble extraction
	orr r1, r1, #0x30		; 30 for ascii
	str r1, [r5],#4
	lsr r0, #4			; shift the register by 4 bits to extract next nibble
	mov r1, r0	
	subs r9, #1
	bne loop
stop 
	b stop
	end
-----------------------------------------
;bcd to hex
;BCD to HEX conversion 	
	area reset, data, readonly
	export __Vectors
__Vectors
	dcd 0x10001000
	dcd Reset_Handler
	
	area mydata, data, readwrite
	
	area mycode, code, readonly
	export Reset_Handler
n1 dcd 0x00000123
	entry
Reset_Handler
	ldr r0, =n1
	ldr r1, [r0]
	mov r8, #0
	mov r2, #10
	mov r3, #0
	mov r4, #1
	mov r5, #0
loop
	and r3, r1, #0x0f	;extract nibble
	mla r5, r3, r4, r5	; form the hex value
	movs r1,r1, lsr #4	;shift the data
	mul r4, r2
	bne loop
stop
	b stop
	end
	
	
	